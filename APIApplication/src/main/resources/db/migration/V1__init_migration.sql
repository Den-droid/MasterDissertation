CREATE TABLE answers
(
    id                 INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    user_assignment_id INTEGER,
    answer             VARCHAR(255),
    answer_number      INTEGER                                  NOT NULL,
    is_correct         BOOLEAN                                  NOT NULL,
    result             DOUBLE PRECISION                         NOT NULL,
    CONSTRAINT pk_answers PRIMARY KEY (id)
);

CREATE TABLE assignments
(
    id                   INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    text                 VARCHAR(255),
    function_result_type SMALLINT,
    CONSTRAINT pk_assignments PRIMARY KEY (id)
);

CREATE TABLE default_assignment_restrictions
(
    id                          INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    university_id               INTEGER,
    subject_id                  INTEGER,
    function_id                 INTEGER,
    assignment_restriction_type SMALLINT,
    attempts_remaining          INTEGER                                  NOT NULL,
    minutes_for_attempt         INTEGER                                  NOT NULL,
    deadline                    TIMESTAMP WITHOUT TIME ZONE,
    CONSTRAINT pk_default_assignment_restrictions PRIMARY KEY (id)
);

CREATE TABLE fields
(
    id          INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name        VARCHAR(255),
    label       VARCHAR(255),
    description VARCHAR(255),
    type        SMALLINT,
    CONSTRAINT pk_fields PRIMARY KEY (id)
);

CREATE TABLE function_min_max_values
(
    id                   INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    value                DOUBLE PRECISION                         NOT NULL,
    function_result_type SMALLINT,
    function_id          INTEGER,
    CONSTRAINT pk_function_min_max_values PRIMARY KEY (id)
);

CREATE TABLE functions
(
    id              INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    text            VARCHAR(255),
    variables_count INTEGER,
    subject_id      INTEGER,
    CONSTRAINT pk_functions PRIMARY KEY (id)
);

CREATE TABLE group_students
(
    group_id INTEGER NOT NULL,
    user_id  INTEGER NOT NULL,
    CONSTRAINT pk_group_students PRIMARY KEY (group_id, user_id)
);

CREATE TABLE group_subjects
(
    group_id   INTEGER NOT NULL,
    subject_id INTEGER NOT NULL,
    CONSTRAINT pk_group_subjects PRIMARY KEY (group_id, subject_id)
);

CREATE TABLE groups
(
    id       INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name     VARCHAR(255),
    owner_id INTEGER,
    CONSTRAINT pk_groups PRIMARY KEY (id)
);

CREATE TABLE marks
(
    id                 INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    user_assignment_id INTEGER,
    mark               INTEGER                                  NOT NULL,
    comment            VARCHAR(255),
    CONSTRAINT pk_marks PRIMARY KEY (id)
);

CREATE TABLE roles
(
    id   INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name VARCHAR(255),
    CONSTRAINT pk_roles PRIMARY KEY (id)
);

CREATE TABLE subjects
(
    id            INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name          VARCHAR(255),
    university_id INTEGER,
    CONSTRAINT pk_subjects PRIMARY KEY (id)
);

CREATE TABLE universities
(
    id   INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name VARCHAR(255),
    CONSTRAINT pk_universities PRIMARY KEY (id)
);

CREATE TABLE url_fields
(
    id       INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    required BOOLEAN                                  NOT NULL,
    multiple BOOLEAN                                  NOT NULL,
    url_id   INTEGER,
    field_id INTEGER,
    CONSTRAINT pk_url_fields PRIMARY KEY (id)
);

CREATE TABLE urls
(
    id          INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    url         VARCHAR(255),
    description VARCHAR(255),
    method      SMALLINT,
    CONSTRAINT pk_urls PRIMARY KEY (id)
);

CREATE TABLE user_assignments
(
    id                  INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    function_id         INTEGER,
    assignment_id       INTEGER,
    user_id             INTEGER,
    status              SMALLINT,
    restriction_type    SMALLINT,
    has_correct_answer  BOOLEAN                                  NOT NULL,
    attempts_remaining  INTEGER                                  NOT NULL,
    last_attempt_time   TIMESTAMP WITHOUT TIME ZONE,
    minutes_for_attempt INTEGER                                  NOT NULL,
    deadline            TIMESTAMP WITHOUT TIME ZONE,
    CONSTRAINT pk_user_assignments PRIMARY KEY (id)
);

CREATE TABLE user_info
(
    id         INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    first_name VARCHAR(255),
    last_name  VARCHAR(255),
    api_key    VARCHAR(255),
    CONSTRAINT pk_user_info PRIMARY KEY (id)
);

CREATE TABLE user_permissions
(
    id                 INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    user_id            INTEGER,
    university_id      INTEGER,
    subject_id         INTEGER,
    function_id        INTEGER,
    user_assignment_id INTEGER,
    CONSTRAINT pk_user_permissions PRIMARY KEY (id)
);

CREATE TABLE user_roles
(
    role_id INTEGER NOT NULL,
    user_id INTEGER NOT NULL
);

CREATE TABLE users
(
    id                    INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    password              VARCHAR(255),
    email                 VARCHAR(255),
    forgot_password_token VARCHAR(255),
    is_approved           BOOLEAN,
    refresh_token         VARCHAR(255),
    CONSTRAINT pk_users PRIMARY KEY (id)
);

ALTER TABLE answers
    ADD CONSTRAINT FK_ANSWERS_ON_USER_ASSIGNMENT FOREIGN KEY (user_assignment_id) REFERENCES user_assignments (id);

ALTER TABLE default_assignment_restrictions
    ADD CONSTRAINT FK_DEFAULT_ASSIGNMENT_RESTRICTIONS_ON_FUNCTION FOREIGN KEY (function_id) REFERENCES functions (id);

ALTER TABLE default_assignment_restrictions
    ADD CONSTRAINT FK_DEFAULT_ASSIGNMENT_RESTRICTIONS_ON_SUBJECT FOREIGN KEY (subject_id) REFERENCES subjects (id);

ALTER TABLE default_assignment_restrictions
    ADD CONSTRAINT FK_DEFAULT_ASSIGNMENT_RESTRICTIONS_ON_UNIVERSITY FOREIGN KEY (university_id) REFERENCES universities (id);

ALTER TABLE functions
    ADD CONSTRAINT FK_FUNCTIONS_ON_SUBJECT FOREIGN KEY (subject_id) REFERENCES subjects (id);

ALTER TABLE function_min_max_values
    ADD CONSTRAINT FK_FUNCTION_MIN_MAX_VALUES_ON_FUNCTION FOREIGN KEY (function_id) REFERENCES functions (id);

ALTER TABLE groups
    ADD CONSTRAINT FK_GROUPS_ON_OWNER FOREIGN KEY (owner_id) REFERENCES users (id);

ALTER TABLE marks
    ADD CONSTRAINT FK_MARKS_ON_USER_ASSIGNMENT FOREIGN KEY (user_assignment_id) REFERENCES user_assignments (id);

ALTER TABLE subjects
    ADD CONSTRAINT FK_SUBJECTS_ON_UNIVERSITY FOREIGN KEY (university_id) REFERENCES universities (id);

ALTER TABLE url_fields
    ADD CONSTRAINT FK_URL_FIELDS_ON_FIELD FOREIGN KEY (field_id) REFERENCES fields (id);

ALTER TABLE url_fields
    ADD CONSTRAINT FK_URL_FIELDS_ON_URL FOREIGN KEY (url_id) REFERENCES urls (id);

ALTER TABLE user_assignments
    ADD CONSTRAINT FK_USER_ASSIGNMENTS_ON_ASSIGNMENT FOREIGN KEY (assignment_id) REFERENCES assignments (id);

ALTER TABLE user_assignments
    ADD CONSTRAINT FK_USER_ASSIGNMENTS_ON_FUNCTION FOREIGN KEY (function_id) REFERENCES functions (id);

ALTER TABLE user_assignments
    ADD CONSTRAINT FK_USER_ASSIGNMENTS_ON_USER FOREIGN KEY (user_id) REFERENCES users (id);

ALTER TABLE user_info
    ADD CONSTRAINT FK_USER_INFO_ON_ID FOREIGN KEY (id) REFERENCES users (id);

ALTER TABLE user_permissions
    ADD CONSTRAINT FK_USER_PERMISSIONS_ON_FUNCTION FOREIGN KEY (function_id) REFERENCES functions (id);

ALTER TABLE user_permissions
    ADD CONSTRAINT FK_USER_PERMISSIONS_ON_SUBJECT FOREIGN KEY (subject_id) REFERENCES subjects (id);

ALTER TABLE user_permissions
    ADD CONSTRAINT FK_USER_PERMISSIONS_ON_UNIVERSITY FOREIGN KEY (university_id) REFERENCES universities (id);

ALTER TABLE user_permissions
    ADD CONSTRAINT FK_USER_PERMISSIONS_ON_USER FOREIGN KEY (user_id) REFERENCES users (id);

ALTER TABLE user_permissions
    ADD CONSTRAINT FK_USER_PERMISSIONS_ON_USER_ASSIGNMENT FOREIGN KEY (user_assignment_id) REFERENCES user_assignments (id);

ALTER TABLE group_students
    ADD CONSTRAINT fk_grostu_on_group FOREIGN KEY (group_id) REFERENCES groups (id);

ALTER TABLE group_students
    ADD CONSTRAINT fk_grostu_on_user FOREIGN KEY (user_id) REFERENCES users (id);

ALTER TABLE group_subjects
    ADD CONSTRAINT fk_grosub_on_group FOREIGN KEY (group_id) REFERENCES groups (id);

ALTER TABLE group_subjects
    ADD CONSTRAINT fk_grosub_on_subject FOREIGN KEY (subject_id) REFERENCES subjects (id);

ALTER TABLE user_roles
    ADD CONSTRAINT fk_userol_on_role FOREIGN KEY (role_id) REFERENCES roles (id);

ALTER TABLE user_roles
    ADD CONSTRAINT fk_userol_on_user FOREIGN KEY (user_id) REFERENCES users (id);